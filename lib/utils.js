'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = {
  clone: clone,
  get: get,
  set: set,
  mapValues: mapValues,
  makePathArray: makePathArray,
  pickBy: pickBy,
  isObject: isObject,
  isArray: isArray
};


function clone(a) {
  try {
    return JSON.parse(JSON.stringify(a, function (key, value) {
      if (typeof value === 'function') {
        return value.toString();
      }
      return value;
    }));
  } catch (e) {
    return a;
  }
}

function get(obj, path, def) {
  if (!path) {
    return obj;
  }
  var pathObj = makePathArray(path);
  var val = void 0;
  try {
    val = pathObj.reduce(function (current, pathPart) {
      return current[pathPart];
    }, obj);
  } catch (e) {}
  return typeof val !== 'undefined' ? val : def;
}

function set() {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var path = arguments[1];
  var value = arguments[2];

  var keys = makePathArray(path);
  var keyPart = void 0;

  if (isStringValidNumber(keys[0]) && !isArray(obj)) {
    obj = [];
  }
  if (!isStringValidNumber(keys[0]) && !isObject(obj)) {
    obj = {};
  }

  var cursor = obj;

  while ((keyPart = keys.shift()) && keys.length) {
    if (isStringValidNumber(keys[0]) && !isArray(cursor[keyPart])) {
      cursor[keyPart] = [];
    }
    if (!isStringValidNumber(keys[0]) && !isObject(cursor[keyPart])) {
      cursor[keyPart] = {};
    }
    cursor = cursor[keyPart];
  }
  cursor[keyPart] = value;
  return obj;
}

function mapValues(obj, cb) {
  var newObj = {};
  for (var key in obj) {
    newObj[key] = cb(obj[key], key);
  }
  return newObj;
}

function makePathArray(obj) {
  return flattenDeep(obj).join('.').replace('[', '.').replace(']', '').split('.');
}

function pickBy(obj, cb) {
  var newObj = {};
  for (var key in obj) {
    if (cb(obj[key], key)) {
      newObj[key] = obj[key];
    }
  }
  return newObj;
}

function flattenDeep(arr) {
  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!isArray(arr)) {
    newArr.push(arr);
  } else {
    for (var i = 0; i < arr.length; i++) {
      flattenDeep(arr[i], newArr);
    }
  }
  return newArr;
}

function isArray(a) {
  return Array.isArray(a);
}

function isObject(a) {
  return !Array.isArray(a) && (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a !== null;
}

function isStringValidNumber(str) {
  return !isNaN(str);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjbG9uZSIsImdldCIsInNldCIsIm1hcFZhbHVlcyIsIm1ha2VQYXRoQXJyYXkiLCJwaWNrQnkiLCJpc09iamVjdCIsImlzQXJyYXkiLCJhIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5Iiwia2V5IiwidmFsdWUiLCJ0b1N0cmluZyIsImUiLCJvYmoiLCJwYXRoIiwiZGVmIiwicGF0aE9iaiIsInZhbCIsInJlZHVjZSIsImN1cnJlbnQiLCJwYXRoUGFydCIsImtleXMiLCJrZXlQYXJ0IiwiaXNTdHJpbmdWYWxpZE51bWJlciIsImN1cnNvciIsInNoaWZ0IiwibGVuZ3RoIiwiY2IiLCJuZXdPYmoiLCJmbGF0dGVuRGVlcCIsImpvaW4iLCJyZXBsYWNlIiwic3BsaXQiLCJhcnIiLCJuZXdBcnIiLCJwdXNoIiwiaSIsIkFycmF5Iiwic3RyIiwiaXNOYU4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQUFlO0FBQ2JBLGNBRGE7QUFFYkMsVUFGYTtBQUdiQyxVQUhhO0FBSWJDLHNCQUphO0FBS2JDLDhCQUxhO0FBTWJDLGdCQU5hO0FBT2JDLG9CQVBhO0FBUWJDO0FBUmEsQzs7O0FBV2YsU0FBU1AsS0FBVCxDQUFnQlEsQ0FBaEIsRUFBbUI7QUFDakIsTUFBSTtBQUNGLFdBQU9DLEtBQUtDLEtBQUwsQ0FDTEQsS0FBS0UsU0FBTCxDQUFlSCxDQUFmLEVBQWtCLFVBQUNJLEdBQUQsRUFBTUMsS0FBTixFQUFnQjtBQUNoQyxVQUFJLE9BQU9BLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0IsZUFBT0EsTUFBTUMsUUFBTixFQUFQO0FBQ0Q7QUFDRCxhQUFPRCxLQUFQO0FBQ0QsS0FMRCxDQURLLENBQVA7QUFRRCxHQVRELENBU0UsT0FBT0UsQ0FBUCxFQUFVO0FBQ1YsV0FBT1AsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBU1AsR0FBVCxDQUFjZSxHQUFkLEVBQW1CQyxJQUFuQixFQUF5QkMsR0FBekIsRUFBOEI7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QkMsV0FBT0MsSUFBUCxDQUFZRixHQUFaO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsU0FBSyxJQUFJRyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILElBQUlQLE1BQXhCLEVBQWdDVSxHQUFoQyxFQUFxQztBQUNuQ1Asa0JBQVlJLElBQUlHLENBQUosQ0FBWixFQUFvQkYsTUFBcEI7QUFDRDtBQUNGO0FBQ0QsU0FBT0EsTUFBUDtBQUNEOztBQUVELFNBQVM5QixPQUFULENBQWtCQyxDQUFsQixFQUFxQjtBQUNuQixTQUFPZ0MsTUFBTWpDLE9BQU4sQ0FBY0MsQ0FBZCxDQUFQO0FBQ0Q7O0FBRUQsU0FBU0YsUUFBVCxDQUFtQkUsQ0FBbkIsRUFBc0I7QUFDcEIsU0FBTyxDQUFDZ0MsTUFBTWpDLE9BQU4sQ0FBY0MsQ0FBZCxDQUFELElBQXFCLFFBQU9BLENBQVAseUNBQU9BLENBQVAsT0FBYSxRQUFsQyxJQUE4Q0EsTUFBTSxJQUEzRDtBQUNEOztBQUVELFNBQVNrQixtQkFBVCxDQUE4QmUsR0FBOUIsRUFBbUM7QUFDakMsU0FBTyxDQUFDQyxNQUFNRCxHQUFOLENBQVI7QUFDRCIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcbiAgY2xvbmUsXG4gIGdldCxcbiAgc2V0LFxuICBtYXBWYWx1ZXMsXG4gIG1ha2VQYXRoQXJyYXksXG4gIHBpY2tCeSxcbiAgaXNPYmplY3QsXG4gIGlzQXJyYXksXG59XG5cbmZ1bmN0aW9uIGNsb25lIChhKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoXG4gICAgICBKU09OLnN0cmluZ2lmeShhLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH0pXG4gICAgKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGFcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXQgKG9iaiwgcGF0aCwgZGVmKSB7XG4gIGlmICghcGF0aCkge1xuICAgIHJldHVybiBvYmpcbiAgfVxuICBjb25zdCBwYXRoT2JqID0gbWFrZVBhdGhBcnJheShwYXRoKVxuICBsZXQgdmFsXG4gIHRyeSB7XG4gICAgdmFsID0gcGF0aE9iai5yZWR1Y2UoKGN1cnJlbnQsIHBhdGhQYXJ0KSA9PiBjdXJyZW50W3BhdGhQYXJ0XSwgb2JqKVxuICB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gdHlwZW9mIHZhbCAhPT0gJ3VuZGVmaW5lZCcgPyB2YWwgOiBkZWZcbn1cblxuZnVuY3Rpb24gc2V0IChvYmogPSB7fSwgcGF0aCwgdmFsdWUpIHtcbiAgY29uc3Qga2V5cyA9IG1ha2VQYXRoQXJyYXkocGF0aClcbiAgbGV0IGtleVBhcnRcblxuICBpZiAoaXNTdHJpbmdWYWxpZE51bWJlcihrZXlzWzBdKSAmJiAhaXNBcnJheShvYmopKSB7XG4gICAgb2JqID0gW11cbiAgfVxuICBpZiAoIWlzU3RyaW5nVmFsaWROdW1iZXIoa2V5c1swXSkgJiYgIWlzT2JqZWN0KG9iaikpIHtcbiAgICBvYmogPSB7fVxuICB9XG5cbiAgbGV0IGN1cnNvciA9IG9ialxuXG4gIHdoaWxlICgoa2V5UGFydCA9IGtleXMuc2hpZnQoKSkgJiYga2V5cy5sZW5ndGgpIHtcbiAgICBpZiAoaXNTdHJpbmdWYWxpZE51bWJlcihrZXlzWzBdKSAmJiAhaXNBcnJheShjdXJzb3Jba2V5UGFydF0pKSB7XG4gICAgICBjdXJzb3Jba2V5UGFydF0gPSBbXVxuICAgIH1cbiAgICBpZiAoIWlzU3RyaW5nVmFsaWROdW1iZXIoa2V5c1swXSkgJiYgIWlzT2JqZWN0KGN1cnNvcltrZXlQYXJ0XSkpIHtcbiAgICAgIGN1cnNvcltrZXlQYXJ0XSA9IHt9XG4gICAgfVxuICAgIGN1cnNvciA9IGN1cnNvcltrZXlQYXJ0XVxuICB9XG4gIGN1cnNvcltrZXlQYXJ0XSA9IHZhbHVlXG4gIHJldHVybiBvYmpcbn1cblxuZnVuY3Rpb24gbWFwVmFsdWVzIChvYmosIGNiKSB7XG4gIGNvbnN0IG5ld09iaiA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBuZXdPYmpba2V5XSA9IGNiKG9ialtrZXldLCBrZXkpXG4gIH1cbiAgcmV0dXJuIG5ld09ialxufVxuXG5mdW5jdGlvbiBtYWtlUGF0aEFycmF5IChvYmopIHtcbiAgcmV0dXJuIGZsYXR0ZW5EZWVwKG9iailcbiAgICAuam9pbignLicpXG4gICAgLnJlcGxhY2UoJ1snLCAnLicpXG4gICAgLnJlcGxhY2UoJ10nLCAnJylcbiAgICAuc3BsaXQoJy4nKVxufVxuXG5mdW5jdGlvbiBwaWNrQnkgKG9iaiwgY2IpIHtcbiAgY29uc3QgbmV3T2JqID0ge31cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChjYihvYmpba2V5XSwga2V5KSkge1xuICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3T2JqXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5EZWVwIChhcnIsIG5ld0FyciA9IFtdKSB7XG4gIGlmICghaXNBcnJheShhcnIpKSB7XG4gICAgbmV3QXJyLnB1c2goYXJyKVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmbGF0dGVuRGVlcChhcnJbaV0sIG5ld0FycilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0FyclxufVxuXG5mdW5jdGlvbiBpc0FycmF5IChhKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGEpXG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0IChhKSB7XG4gIHJldHVybiAhQXJyYXkuaXNBcnJheShhKSAmJiB0eXBlb2YgYSA9PT0gJ29iamVjdCcgJiYgYSAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1ZhbGlkTnVtYmVyIChzdHIpIHtcbiAgcmV0dXJuICFpc05hTihzdHIpXG59XG4iXX0=